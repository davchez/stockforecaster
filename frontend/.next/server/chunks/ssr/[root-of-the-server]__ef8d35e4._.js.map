{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/david/Desktop/Work/stockforecaster/frontend/src/lib/api.ts"],"sourcesContent":["// Importing env variables (API URL and Key from .env.local)\r\nconst API_URL = process.env.NEXT_PUBLIC_API_URL;\r\nconst API_KEY = process.env.NEXT_PUBLIC_API_KEY;\r\n\r\n// TypeScript interface - Defining shape of data SENDING to the API ensuring structure with POST\r\nexport interface PredictionRequest {\r\n    ticker: string;                 // Stock symbol (\"ticker\")\r\n    start_date: string;             // Format: \"YYYY-MM-DD\"\r\n    end_date: string;               // Format: \"YYYY-MM-DD\"\r\n    include_sentiment: boolean;     // Boolean check on whether or not to include news sentiment\r\n}\r\n\r\n// TypeScript interface - What we GET BACK when sumitting a prediction after a POST request\r\nexport interface PredictionResponse {\r\n    request_id: string;                                          // UUID to track prediction\r\n    status: 'PENDING' | 'PROCESSING' | 'COMPLETED' | 'FAILED';   \r\n    message?: string;                                            // Optional message\r\n}\r\n\r\n// TypeScript interface: What we GET BACK when checking status using GET\r\nexport interface StatusResponse {\r\n    request_id: string;\r\n    status: 'PENDING' | 'PROCESSING' | 'COMPLETED' | 'FAILED';\r\n    ticker: string;\r\n    created_at: string;                     // ISO timestamp\r\n    updated_at: string;                     // ISO timestamp\r\n\r\n    // Optional result field which only exists when status is 'COMPLETED'\r\n    result?: {\r\n        ticker: string;\r\n        date_range: {\r\n            start: string;\r\n            end: string;\r\n        };\r\n        prediction: {\r\n            predicted_price_20d: string;    // 20 day prediction (i.e. \"$202.33\")\r\n            current_price: string;          // Price of final day in time range\r\n            predicted_change_20d: string;   // Percentage change (i.e. \"-22.38%\") from final day\r\n        };\r\n        model_performance: {\r\n            mape: string;                   // Backtest mean average percent error (e.g. \"3.55%\")\r\n        };\r\n        sentiment?: {                       // Optional; only if include_sentiment is true\r\n            average_sentiment: string;\r\n            news_headlines: Array<{         // Array declares all objects must have these 3 properties\r\n                datetime: string;           // Format: {month}-{day}\r\n                headline: string;           // News headline\r\n                sentiment: string;          // Calculated sentiment from VADER\r\n            }>;\r\n        };\r\n        forecast_timeline: {\r\n            historical_days: number;        // Number of trading days LSTM used to train\r\n            forecast_days: number;          // Number of days out LSTM is forecasting\r\n            total_days: number;             // Total number of days (history + forecast)\r\n        };\r\n    };\r\n\r\n    // 'error' field for if status is 'FAILED'\r\n    error?: string;                  \r\n}\r\n\r\n// Function: Submits a new predction request\r\n// Returns: returns a \"promise\" that resolves to PredictionResponse\r\n// Note: Similar to Future in Dart\r\nexport async function submitPrediction(request: PredictionRequest): Promise<PredictionResponse> {\r\n    // Make HTTP POST request to /predict endpoint of API\r\n    const response = await fetch(`${API_URL}/predict`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'x-api-key': API_KEY!,\r\n        },\r\n        body: JSON.stringify(request)               // Similar to json.dump in Python, I believe\r\n    });\r\n\r\n    // If request failed for internal or malformed request\r\n    if (!response.ok) {\r\n        throw new Error(`Failed to submit prediction: ${response.statusText}`)\r\n    }\r\n\r\n    // Parse JSON response and return it\r\n    return response.json();\r\n}\r\n\r\n// Function: Checks status of existing prediction\r\n// Returns: Promise that resolves to StatusResponse\r\nexport async function checkStatus(requestId: string): Promise<StatusResponse> {\r\n    // Make HTTP GET request to /status/{requestID} endpoint of API\r\n    const response = await fetch(`${API_URL}/status/${requestId}`, {\r\n        method: 'GET',\r\n        headers: {\r\n            'x-api-key': API_KEY!,\r\n        },\r\n    });\r\n\r\n    // If request failed for internal or malformed request\r\n    if (!response.ok) {\r\n        throw new Error(`Failed to check status: ${response.statusText}`);\r\n    }\r\n\r\n    // Parse JSON response and return it\r\n    return response.json();\r\n}"],"names":[],"mappings":"AAAA,4DAA4D;;;;;;;AAC5D,MAAM;AACN,MAAM;AA8DC,eAAe,iBAAiB,OAA0B;IAC7D,qDAAqD;IACrD,MAAM,WAAW,MAAM,MAAM,GAAG,QAAQ,QAAQ,CAAC,EAAE;QAC/C,QAAQ;QACR,SAAS;YACL,gBAAgB;YAChB,aAAa;QACjB;QACA,MAAM,KAAK,SAAS,CAAC,SAAuB,4CAA4C;IAC5F;IAEA,sDAAsD;IACtD,IAAI,CAAC,SAAS,EAAE,EAAE;QACd,MAAM,IAAI,MAAM,CAAC,6BAA6B,EAAE,SAAS,UAAU,EAAE;IACzE;IAEA,oCAAoC;IACpC,OAAO,SAAS,IAAI;AACxB;AAIO,eAAe,YAAY,SAAiB;IAC/C,+DAA+D;IAC/D,MAAM,WAAW,MAAM,MAAM,GAAG,QAAQ,QAAQ,EAAE,WAAW,EAAE;QAC3D,QAAQ;QACR,SAAS;YACL,aAAa;QACjB;IACJ;IAEA,sDAAsD;IACtD,IAAI,CAAC,SAAS,EAAE,EAAE;QACd,MAAM,IAAI,MAAM,CAAC,wBAAwB,EAAE,SAAS,UAAU,EAAE;IACpE;IAEA,oCAAoC;IACpC,OAAO,SAAS,IAAI;AACxB","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/david/Desktop/Work/stockforecaster/frontend/src/app/page.tsx"],"sourcesContent":["// Telling next.js this is a client component and not server rendered\r\n// Needed since we're using React hooks and browser APIs\r\n'use client';\r\n\r\n/*\r\nNote: TypeScript language (superset of JavaScript), React Framework (UI Library)\r\n      - Includes some level of JavaScript as well though (\"functional programming\" looks semi-OOP)\r\n\r\nNote: Server-Side Rendering (SSR): AWS Server (Next.js) -> Generates HTML -> Sends to browser\r\n      - Code runs on Node.js server\r\n      - No access to browser APIs (no window, document, localStorage)\r\n      - Happens ONCE when page loads\r\n      - Good for SEO, fast initial load\r\n\r\nNote: Client-Side Rendering (CSR): Browser receives minimal HTML -> JavaScript runs in Browser -> builds UI\r\n      - Code runs in user's browser\r\n      - Full access to browser APIs\r\n      - Can be interactive (responds to user actions)\r\n      - NECESSARY for dynamic apps\r\n\r\nNote: React Hooks\r\n      - useState: Memory (Component memory which is NOT persistent; survives re-renders, NOT page refreshes)\r\n      - useEffect: Side effects (Like an observer that changes once a dependency is changed)\r\n\r\nNote: Browser API and why servers can't use them\r\n      - Browser APIs can only work in browsers because the screen, window, user-specific storage, and interactions don't exist on the server\r\n      - Server only has node.js so nothing much happens\r\n\r\nNote: @/ starts from the src/ directory\r\n*/\r\n\r\nimport { useState, useEffect } from 'react';                // React hooks for state management\r\nimport { submitPrediction, checkStatus } from '@/lib/api';   // Our API functions\r\nimport type { PredictionResponse, StatusResponse } from '@/lib/api';        // TypeScript type for the response\r\n\r\nexport default function Home() {\r\n\r\n  // ================================ FORM INPUT STATE ===============================\r\n\r\n  const [ticker, setTicker] = useState('AAPL');                   // Default AAPL ticker\r\n\r\n  const [startDate, setStartDate] = useState('2024-01-01');       // Default January 1, 2024 start\r\n\r\n  const [endDate, setEndDate] = useState('2025-01-01');           // Default January 1, 2025 end\r\n\r\n  const [includeSentiment, setIncludeSentiment] = useState(true); // Default include sentiment == true\r\n\r\n  // ================================= REQUEST STATE =================================\r\n\r\n  const [requestId, setRequestId] = useState<string | null>(null);    // These lines actually instantiate the function like setRequestId to which variable requestId is updated\r\n  // This can be a string OR null, nothing else.  Also, random, but this triggers a re-render since its a React setter\r\n\r\n  const [status, setStatus] = useState<string | null>(null);\r\n  // Current status: 'PENDING' | 'PROCESSING' | 'COMPLETED' | 'FAILED' | null\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // ================================= RESULTS STATE =================================\r\n\r\n  const [results, setResults] = useState<StatusResponse | null>(null);\r\n\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // ============================ FORM SUBMISSION HANDLER ============================\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    // Prevent default form behavior (page refresh)\r\n    e.preventDefault();\r\n\r\n    // Reset previous results and errors\r\n    setError(null);       // Clearing any old error messages\r\n    setResults(null);     // Clearing any old prediciton results\r\n    setStatus(null);      // Clear old status\r\n    setIsLoading(true);   // Shows loading spinner\r\n\r\n    const MAX_ATTEMPTS = 2;\r\n    let attempt = 0;\r\n\r\n    while (attempt < MAX_ATTEMPTS) {\r\n      try {\r\n        attempt++;\r\n        // Cold start possibly encountered\r\n        if (attempt > 1) {\r\n          console.log(`Retrying attempt ${attempt}/${MAX_ATTEMPTS}...`);\r\n        }\r\n        // Calls our API function from api.ts\r\n        // Does: POST /predict with our form data\r\n        const response = await submitPrediction({\r\n          ticker,\r\n          start_date: startDate,\r\n          end_date: endDate,\r\n          include_sentiment: includeSentiment\r\n        });\r\n\r\n        // If we're here, it was a success: we got request_id back!\r\n        setRequestId(response.request_id);\r\n        setStatus('PENDING');\r\n        return;\r\n\r\n      } catch (err) {\r\n        // Checking if it's a timeout or cold start error\r\n        const errorMessage = err instanceof Error ? err.message : String(err);\r\n        const isTimeoutError = errorMessage.includes('timeout') ||\r\n                               errorMessage.includes('504') ||\r\n                               errorMessage.includes('Gateway');\r\n        \r\n        // If it's the last attempt OR not a timeout, give up\r\n        if (attempt >= MAX_ATTEMPTS || !isTimeoutError) {\r\n          setIsLoading(false);\r\n          setError(err instanceof Error ? err.message : `Failed to submit request after ${attempt} attempts.`);\r\n          return;\r\n        }\r\n\r\n        // Otherwise, wait a little bit before retrying for cold start issue\r\n        console.log(`Attempt ${attempt} failed: likely cold start, retrying in 5 seconds...`);\r\n        await new Promise(resolve => setTimeout(resolve, 5000));\r\n      }\r\n    }\r\n  };\r\n\r\n  // ================================= POLLING LOGIC =================================\r\n\r\n  useEffect(() => {\r\n    // Code runs when dependencies change (Observer!)\r\n    // If no requestId, don't poll\r\n    if (!requestId) return;\r\n\r\n    // If already completed or failed, don't poll\r\n    if (status === 'COMPLETED' || status === 'FAILED') return;\r\n\r\n    console.log('Starting to poll for request: ', requestId);\r\n\r\n    let pollCount = 0;        // Poll count to ensure that if a request fails or is hung up, to stop\r\n    const MAX_POLLS = 20;     // 20 * 3 seconds = 1 minute\r\n\r\n    const pollStatus = async () => {\r\n      pollCount++;\r\n\r\n      if (pollCount > MAX_POLLS) {\r\n        clearInterval(pollInterval);\r\n        setIsLoading(false);\r\n        setError('Prediction timed out after 1 minute. Please try again with at least 6 months of training data.')\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // Call our API function from api.ts, does GET /status/{requestId}\r\n        const response = await checkStatus(requestId);\r\n\r\n        console.log('Poll response: ', response.status);\r\n\r\n        setStatus(response.status);\r\n\r\n        if (response.status === 'COMPLETED') {\r\n          setResults(response);\r\n          setIsLoading(false);\r\n          clearInterval(pollInterval);  // Stop polling\r\n          console.log('Prediction successfully completed!');\r\n\r\n        } else if (response.status === 'FAILED') {\r\n          setError('Prediction failed! Check your ticker and/or please try again with at least 6 months of training data.');\r\n          setIsLoading(false);\r\n          clearInterval(pollInterval);  // Stop polling\r\n          console.log('Prediction failed');\r\n        }\r\n      } catch (err) {\r\n        console.error('Polling error: ', err);\r\n        setError(err instanceof Error ? err.message : 'Failed to check status');\r\n        setIsLoading(false);\r\n        clearInterval(pollInterval);\r\n      }\r\n    };\r\n\r\n    // Start polling immediately \r\n    pollStatus();\r\n\r\n    // Poll every 3 seconds\r\n    const pollInterval = setInterval(pollStatus, 3000);\r\n\r\n    // Cleanup: When component unmounts (navigates away, closes tab, refreshes page) or requestId changes\r\n    return () => {\r\n      console.log('Stopping polling');\r\n      clearInterval(pollInterval);\r\n    };\r\n    // Removed status from dependencies so website doesn't reload with every new status update (caused UX errors)\r\n  }, [requestId]);\r\n\r\n  return (\r\n    /*\r\n    - min-h-screen: Full viewport, height minimum (minimum: viewport height, but grow taller if content needs; i.e. content fills screen not stretches past)\r\n    - bg-gradient-to-br: Background gradient form top-left to bottom-right\r\n    - from-gray-900 to-gray-900: Dark gray gradient colors\r\n    - p-8: Padding of 32 px (2rem) all round (Tailwind spacing scale...  annoying)\r\n    - Note: \"rem\" is relative to the ROOT (html) font size (i.e. user sets font size to 20px from 40?  REM scales with it)\r\n    */\r\n    <main className = \"min-h-screen bg-gradient-to-br from-gray-900 to-gray-800 text-white p-8\">\r\n      {/*Container*/}\r\n      \r\n      <div className = \"max-w-4xl mx-auto\">\r\n\r\n        { /* Header */ }\r\n        <div className = \"text-center mb-12\">\r\n          <h1 className = \"text-5xl font-bold mb-4\">\r\n            StockForecaster\r\n          </h1>\r\n          <p className = \"text-gray-400 text-lg\">\r\n            LSTM-based 20-day stock price forecasting with sentiment analysis\r\n          </p>\r\n        </div>\r\n\r\n        {/* Form */}\r\n        <form onSubmit={handleSubmit} className = \"bg-gray-800 rounded-lg p-8 shadow-2xl mb-8\">\r\n\r\n          {/* Step 1: Stock Ticker Input*/ }\r\n          <div className=\"mb-6\">\r\n            <label htmlFor = \"ticker\" className = \"block text-sm font-medium mb-2\">\r\n              Stock Ticker Symbol\r\n            </label>\r\n            <input \r\n              type = \"text\"\r\n              id = \"ticker\"\r\n              value = {ticker}\r\n              onChange = {(e) => setTicker(e.target.value.toUpperCase())}\r\n              placeholder = \"AAPL\"\r\n              className = \"w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n              required\r\n            />\r\n          </div>\r\n\r\n          {/* Step 2: Start Date Input */}\r\n          <div className = \"mb-6\">\r\n            <label htmlFor = \"startDate\" className = \"block text-sm font-medium mb-2\">\r\n              Start Date\r\n            </label>\r\n            <input \r\n              type = \"date\"\r\n              id = \"startDate\"\r\n              value = {startDate}\r\n              onChange = {(e) => setStartDate(e.target.value)}\r\n              className = \"w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n              required\r\n            />\r\n          </div>\r\n\r\n          {/* Step 3: End Date Input */}\r\n          <div className = \"mb-6\">\r\n            <label htmlFor = \"startDate\" className = \"block text-sm font-medium mb-2\">\r\n              Start Date\r\n            </label>\r\n            <input \r\n              type = \"date\"\r\n              id = \"endDate\"\r\n              value = {endDate}\r\n              onChange = {(e) => setEndDate(e.target.value)}\r\n              className = \"w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n              required\r\n            />\r\n          </div>\r\n\r\n          {/* Step 4: Sentiment Check */}\r\n          <div className = \"mb-8 flex items-center\">\r\n            <input\r\n              type = \"checkbox\"\r\n              id = \"includeSentiment\"\r\n              checked = {includeSentiment}\r\n              onChange = {(e) => setIncludeSentiment(e.target.checked)}\r\n              className = \"w-5 h-5 bg-gray-700 border-gray-600 rounded focus:ring-2 focus:ring-blue-500\"\r\n            />\r\n            <label htmlFor = \"includeSentiment\" className = \"ml-3 text-sm\">\r\n              Include sentiment analysis (scrapes recent news)\r\n            </label>\r\n          </div>\r\n\r\n          {/* Step 5: Submit Button, submit request form to API */}\r\n          <button \r\n            type = \"submit\"\r\n            disabled = {isLoading}\r\n            className = \"w-full bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white font-semibold py-4 px-6 rounded-lg transition-colors duration-200\"\r\n          >\r\n            {isLoading ? 'Training Model...' : 'Get Prediction'}\r\n          </button>\r\n        </form>\r\n\r\n        {/* Loading State */}\r\n        {isLoading && (\r\n          <div className = \"text-center p-8\">\r\n            <div className = \"inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-white mb-4\"></div>\r\n            <p className = \"text-lg\">{status === 'PENDING' ? 'Submitting request...' : 'Training model...'}</p>\r\n          </div>\r\n        )}\r\n\r\n        {/* Error State */} \r\n        {error && (\r\n          <div className = \"bg-red-900 border border-red-700 text-white px-6 py-4 rounded-lg\">\r\n            <p className = \"font-semibold\">Error:</p>\r\n            <p>{error}</p>\r\n          </div>\r\n        )}\r\n\r\n        {/* Results Display */}\r\n        {results && results.result && results.request_id === requestId && (\r\n          <div className=\"bg-gray-800 rounded-lg p-8 shadow-2xl\">\r\n            <h2 className=\"text-3xl font-bold mb-6\">{results.result.ticker} 4-Week Price Forecast</h2>\r\n            \r\n            <div className=\"grid grid-cols-2 gap-6 mb-6\">\r\n              <div>\r\n                <p className=\"text-gray-400 text-sm\">Current Price</p>\r\n                <p className=\"text-2xl font-bold\">{results.result.prediction.current_price}</p>\r\n              </div>\r\n              <div>\r\n                <p className=\"text-gray-400 text-sm\">20-Day Prediction</p>\r\n                <p className=\"text-2xl font-bold\">{results.result.prediction.predicted_price_20d}</p>\r\n              </div>\r\n              <div>\r\n                <p className=\"text-gray-400 text-sm\">Expected Change</p>\r\n                <p className={`text-2xl font-bold ${parseFloat(results.result.prediction.predicted_change_20d) > 0 \r\n                  ? 'text-green-400' : 'text-red-400'}`}>\r\n                    {results.result.prediction.predicted_change_20d}\r\n                </p>\r\n              </div>\r\n              <div>\r\n                <p className=\"text-gray-400 text-sm\">Model Accuracy (100% - MAPE)</p>\r\n                <p className=\"text-2xl font-bold\">{100.00 - parseFloat(results.result.model_performance.mape)}%</p>\r\n              </div>\r\n              {results.result.sentiment && (\r\n                <div>\r\n                  <p className=\"text-gray-400 text-sm\">Average Sentiment</p>\r\n                  <p className={`text-2xl font-bold ${parseFloat(results.result.sentiment.average_sentiment) > 0 \r\n                    ? 'text-green-400' : 'text-red-400'}`}>\r\n                      {(parseFloat(results.result.sentiment.average_sentiment) * 100).toFixed(2)}%\r\n                    </p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n        </div>\r\n    </main>\r\n  );\r\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 603, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/david/Desktop/Work/stockforecaster/frontend/node_modules/next/src/server/route-modules/app-page/module.compiled.js"],"sourcesContent":["if (process.env.NEXT_RUNTIME === 'edge') {\n  module.exports = require('next/dist/server/route-modules/app-page/module.js')\n} else {\n  if (process.env.__NEXT_EXPERIMENTAL_REACT) {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.prod.js')\n      }\n    }\n  } else {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.prod.js')\n      }\n    }\n  }\n}\n"],"names":["process","env","NEXT_RUNTIME","module","exports","require","__NEXT_EXPERIMENTAL_REACT","NODE_ENV","TURBOPACK"],"mappings":"AAAA,IAAIA,QAAQC,GAAG,CAACC,YAAY,KAAK,QAAQ;;KAElC;IACL,IAAIF,QAAQC,GAAG,CAACK,yBAAyB,EAAE;;SAcpC;QACL,IAAIN,QAAQC,GAAG,CAACM,QAAQ,KAAK,WAAe;YAC1C,IAAIP,QAAQC,GAAG,CAACO,SAAS,eAAE;gBACzBL,OAAOC,OAAO,GAAGC,QAAQ;YAC3B,OAAO;;QAGT,OAAO;;IAOT;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 622, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/david/Desktop/Work/stockforecaster/frontend/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.ts"],"sourcesContent":["module.exports = (\n  require('../../module.compiled') as typeof import('../../module.compiled')\n).vendored['react-ssr']!.ReactJsxDevRuntime\n"],"names":["module","exports","require","vendored","ReactJsxDevRuntime"],"mappings":"AAAAA,OAAOC,OAAO,GACZC,QAAQ,4HACRC,QAAQ,CAAC,YAAY,CAAEC,kBAAkB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 627, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/david/Desktop/Work/stockforecaster/frontend/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react.ts"],"sourcesContent":["module.exports = (\n  require('../../module.compiled') as typeof import('../../module.compiled')\n).vendored['react-ssr']!.React\n"],"names":["module","exports","require","vendored","React"],"mappings":"AAAAA,OAAOC,OAAO,GACZC,QAAQ,4HACRC,QAAQ,CAAC,YAAY,CAAEC,KAAK","ignoreList":[0],"debugId":null}}]
}